  System.out.println("Joel ordered a " + pizza.getName() + "\n"); }}**********pg 113***************publiic class DependentPizzaStore { public Pizza cewtePizza(String style, String type) {  Pizza pizza = null;  if (style.equals("NY")) { public Pizza creatsPizza(type) { if (type.equals("cheese")) {  pizza = new MYStyleCheesePizza(): } else if (type.equals("pepperoni") {  pizza =new MYStylePepperoniPizza(): ) else if (type.equals("clam") {  pizza = new MYStypeClamPizza(): ) else if (type.equals("veggie") {  pizza = new MYStyleVeggiePizza(): ))**********lado 1, pg 107**************public Pizza createPizza(type) { if (type.equals("cheese")) {  pizza = new ChicagoStyleCheesePizza(): ) else if (type.equals("pepperoni") {  pizza = new chicagoStylePepperoniPizza(): ) else if (type.equals("clan") {  pizzaa + new ChicagoStyleClanPizza(): ) else if (type.equals("veggie") {  pizza = new ChicagoStyleVeggiePizza(): )}**********lado 2, pg 107*************NYPizzaFactory nyFactory = new NYPizzaFactory();PizzaStore nyStore = new PizzaStore(nyFactory);nyStore.order("Veggie");ChicagoPizzaFactory chucagoFactory = new ChicagoPizzaFactory();PizzaStore chicagoStore = new PizzaStore(chicagoFactory);chicagoStore.order("Veggie");************pg 105*******************public abstract class PizzaStore { public Pizza ordeerPizza(String type) {  Pizza pizza;  pizza = createPizza(type);  pizza.prepare();  pizza.bake();  pizza.cut();  pizza.box();	  return pizza; } abstract createPizza(String type);}************pg 106*****************public class NYPizzaStore extends PizzaStore { Pizza createPizza(String item) {  if (item.equals("cheese")) {   return new NYStyleCheesePizza();  } else if (item.equals("veggie")) {   return new NYStyleVeggiePizza();  } else if (item.equals("clan")) {   return new NYStyleClanPizza();  } else if (item.equals("pepperoni")) {   return new NYStylePepperoniPizza();  } else return null; }}************pg 108************public abstract class PizzaStore { public Pizza orderPizza(String type);  Pizza pizza;   pizza = createPizza(type);      pizza.prepare();   Pizza.bake();   pizza.cut();  pizza.box();      return pizza;  }    protected abstract Pizza createPizza(string type);  //outros métodos aqui }**************pg 109*******************public abstract class Pizza { String name; String dough; String sauce; ArrayList toppings = new ArrayList(); void prepare();  System.out.println("Preparing " + name);  System.out.println("Tossing dough...");  System.out.println("Adding sauce...");  System.out.println("Adding topping: ");  for (int i = 0; i < toppings.size(); i++) {   System.out.println(" " + toppings.get(i));  } }	 void bake() {  System.out.println("bake for 25 minutes ate350"); }	 void cut() {  System.out.println("Cutting the pizza into diagonal alices"); }	 void box() {  System.out.println("Place pizza in official PizzaStore box"); }	 public String getName() {  return name; }}*********pg 112************************public class NYStyleCheesePizza extends Pizza { public NYStyleCheesePizza() {  name = "NY Style Sauce and Cheese Pizza";  dough = "Thin Crust Dough";   sauce = "Mariana Sauce";  toppings.add("Grated Reggiano Cheese"); }}public class ChicagoStyleCheesePizza extends Pizza { public ChicagoStyleCheesePizza() {  name = "Chicago Style Deep Dish Cheese Pizza";  dough = "Extra Thick Crust Dough";  sauce = "Plum Tomato Sauce";  toppings.add("Shredded Mozzarella Cheese"; }	 void cut() {  System.out.println("Cutting the pizza into square slices"); }}****************pg 113**********************public class PizzaTestDrive {	 public static void main (Sting[] args) {  PizzaStore nyStore = new NYPizzaStore();  PizzaStore chicagoStore = new ChicagoPizzaStore();  Pizza pizza = nyStore.orderPizza("cheese");  System.out.println("Ethan ordered a " + pizza.getName() + "\n");  pizza = chicaggoStore.orderPizza("cheese");   pizza = new NYStyleCheesePizza();  } else if (type.equals("veggie")){   pizza = new NYStyleVeggiePizza();  } else if (type.equals("clam")){   pizza = new NYStyleClamPizza();  } else if (type.equals("Pepperoni")){   pizza = new NYStylePepperoniPizza();  } } else if (style.equals("cheese")){  if (type.equals("cheese")) {   pizza = new ChicagoStyleCheesePizza();  } else if (type.equals("veggie")) {   pizza = new ChicagoStyleVeggiePizza();    } else if (type.equals("clam")) {   pizza = new ChicagoStyleClamPizza();  } else if (type.equals("Pepperoni")) {   pizza = new ChicagoStylePepperoniPizza();  } } else {  System.out.println("Error: invalid type of pizza");  return null; } pizza.prepare(); pizza.bake(); pizza.cut(); pizza.box(); return pizza; }}